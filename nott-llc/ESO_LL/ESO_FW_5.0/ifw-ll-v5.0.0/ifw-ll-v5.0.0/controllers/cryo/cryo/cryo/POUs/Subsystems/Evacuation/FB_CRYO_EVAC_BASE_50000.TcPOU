<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_CRYO_EVAC_BASE_50000" Id="{79e953c8-6b05-48d4-8886-1b1c5bf0f925}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CRYO_EVAC_BASE_50000
VAR_INPUT
	in_bEnable:		BOOL := FALSE;	// System active while in_bEnable is TRUE
	in_RefVAGF:		REFERENCE TO FB_CRYO_PRESSURE_VOTE;
	in_RefVAGG:		REFERENCE TO FB_CRYO_PRESSURE_VOTE;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	/////////
	// Pumps
	/////////
	
	rpRef:	REFERENCE TO FB_CRYO_PUMP_BASE;		// Roughing Pump
	tpRef:	REFERENCE TO FB_CRYO_PUMP_BASE;		// Turbo Molecular Pump
	
	//////////
	// Valves
	//////////
	
	PVV1:	FB_CRYO_VALVE_CTRL;					// Prevacuum Valve #1
	PVV2:	FB_CRYO_VALVE_CTRL;					// Prevacuum Valve #2
	PVV3:	FB_CRYO_VALVE_CTRL;					// Prevacuum Valve #3
	PVV4:	FB_CRYO_VALVE_CTRL;					// Prevacuum Valve #4
	GBV:	FB_CRYO_VALVE_CTRL;					// Gas-ballast Valve
	
	// Valve command handling
	cmdPVV1:	FB_CRYO_ACTUATOR_CMD;
	cmdPVV2:	FB_CRYO_ACTUATOR_CMD;
	cmdPVV3:	FB_CRYO_ACTUATOR_CMD;
	cmdPVV4:	FB_CRYO_ACTUATOR_CMD;
	cmdGBV:		FB_CRYO_ACTUATOR_CMD;

	
	// Pointers to valves
	ptrV:	ARRAY [1..5] OF POINTER TO FB_CRYO_VALVE_CTRL;
	// Pointers to valve commands
	ptrVC:	ARRAY [1..5] OF POINTER TO FB_CRYO_ACTUATOR_CMD;
	// Pointers to Enable flags for valves
	ptrEV:	ARRAY [1..5] OF POINTER TO BOOL;
	
	////////////
	// Pressure
	////////////
	
	// Pressure transducers
	sensor_VAG1:	FB_CRYO_SENSOR_PRESSURE;	// Prevacuum pressure gauge #1
	sensor_VAG2:	FB_CRYO_SENSOR_PRESSURE;	// Prevacuum pressure gauge #2
	sensor_VAG3:	FB_CRYO_SENSOR_PRESSURE;	// Prevacuum pressure gauge #3

	
	// Pressure measurements
	VAG1:	FB_CRYO_PRESSURE_VOTE;				// Prevacuum pressure #1
	VAG2:	FB_CRYO_PRESSURE_VOTE;				// Prevacuum pressure #2
	VAG3:	FB_CRYO_PRESSURE_VOTE;				// Prevacuum pressure #3
	VAGF:	FB_CRYO_PRESSURE_VOTE;				// Cryo pressure F
	VAGG:	FB_CRYO_PRESSURE_VOTE;				// Cryo pressure G
	// Pointers to pressures
	ptrP:	ARRAY [1..5] OF POINTER TO FB_CRYO_PRESSURE_VOTE;
	
	
	cfg:	T_CRYO_EVAC_CFG_50000;
	ctrl:	T_CRYO_EVAC_CTRL_50000;
	stat:	T_CRYO_EVAC_STAT_50000;
	
	timer:	TON;
	trig:	R_TRIG;	// Start trigger
	
	// GUI staff
	guiValveIndex:	UINT := 1;	// Index for Valve Engineering GUI
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// NOTE: Configuration is set on the first cycle.
//       Once stat.bConfigured is TRUE, 
//       configuration is not updated any more.
M_Configure();

M_ReadSensors();

M_ExecuteControllers();

M_UpdateStatus();

M_StateMachine();]]></ST>
    </Implementation>
    <Method Name="M_ActionExecute" Id="{eac1b6fe-6644-4c2a-8764-0a0abb7afd35}">
      <Declaration><![CDATA[METHOD M_ActionExecute
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE stat.nState	OF
	E_CRYO_EVAC_STATE_50000.NONE:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.OFF:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.START_PVP:
		ctrl.bEnable_PVP	:= TRUE;
		ctrl.bEnable_PVV1	:= FALSE;
		ctrl.bEnable_PVV2	:= FALSE;
		ctrl.bEnable_PVV3	:= FALSE;
		ctrl.bEnable_PVV4	:= FALSE;
		ctrl.bEnable_GBV	:= FALSE;

	E_CRYO_EVAC_STATE_50000.OPEN_GBV:
		ctrl.bEnable_GBV	:= TRUE;

	E_CRYO_EVAC_STATE_50000.WAIT_VAG3:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.OPEN_PVV1:
		ctrl.bEnable_PVV1	:= TRUE;

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_1_3:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.OPEN_PVV2:
		ctrl.bEnable_PVV2	:= TRUE;

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_1:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.CLOSE_PVV2:
		ctrl.bEnable_PVV2	:= FALSE;

	E_CRYO_EVAC_STATE_50000.CLOSE_PVV1:
		ctrl.bEnable_PVV1	:= FALSE;

	E_CRYO_EVAC_STATE_50000.START_TMP:
		ctrl.bEnable_TMP	:= TRUE;
		
	E_CRYO_EVAC_STATE_50000.OPEN_PVV3:
		ctrl.bEnable_PVV3	:= TRUE;

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_2_3:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.OPEN_PVV4:
		ctrl.bEnable_PVV4	:= TRUE;

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_2:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.CLOSE_GBV:
		ctrl.bEnable_GBV	:= FALSE;

	E_CRYO_EVAC_STATE_50000.EVACUATING:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES:
		ctrl.bEnable_PVV1	:= FALSE;
		ctrl.bEnable_PVV2	:= FALSE;
		ctrl.bEnable_PVV3	:= FALSE;
		ctrl.bEnable_PVV4	:= FALSE;
		ctrl.bEnable_GBV	:= FALSE;

	E_CRYO_EVAC_STATE_50000.DELAY_STOPPING:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.STOP_TMP_1:
		ctrl.bEnable_TMP	:= FALSE;

	E_CRYO_EVAC_STATE_50000.STOP_PVP:
		ctrl.bEnable_PVP	:= FALSE;

	E_CRYO_EVAC_STATE_50000.WAIT_TMP_STANDSTILL:
		;	// Nothing to do

	E_CRYO_EVAC_STATE_50000.STOP_TMP_2:
		ctrl.bEnable_TMP	:= FALSE;
	
END_CASE

timer(IN:=FALSE);	// Reset timer, just in case.
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_ClosingAllValves" Id="{d9f32deb-73b2-4995-84bd-71b9309239a7}">
      <Declaration><![CDATA[METHOD M_Activity_ClosingAllValves
VAR_INPUT
END_VAR
VAR
	i:			INT;
	bAllClosed:	BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check all valves if they are closed.
// If any of them is not closed, then they are not all closed.
FOR i := 1 TO 5 DO
	IF NOT ptrV[i]^.stat.bActOFF	THEN
		bAllClosed	:= FALSE;
		EXIT;
	END_IF
END_FOR

IF bAllClosed THEN
	// All valves are closed.
	// In next state apply a delay before stopping pumps.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.DELAY_STOPPING);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_ClosingValve" Id="{5ebbd68a-a0f2-4c14-a7c4-e194a1db36db}">
      <Declaration><![CDATA[METHOD M_Activity_ClosingValve
VAR_INPUT
	index:		INT;
	nNextState:	E_CRYO_EVAC_STATE_50000;	// Next state after valve is closed
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if valve index is valid.
// If not, just return (for safety).
IF index < 1  OR  index > 5	THEN
	RETURN;
END_IF 

IF ptrV[index]^.stat.bActOFF THEN
	// The valve is closed.
	// Set next state and execute its action
	M_SetNextState(nNextState);	// Next state
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_DelayBeforeStoppingPumps" Id="{09f875e4-8c09-4c5a-b7d5-afb531f0dd9b}">
      <Declaration><![CDATA[METHOD M_Activity_DelayBeforeStoppingPumps
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[timer(IN:=TRUE, PT:=CFG.tDelay);

IF timer.Q THEN
	// Delay timer expired.
	// Reset timer.
	timer(IN:=FALSE);
	
	// Stop Turbo Pump.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.STOP_TMP_1);	// Next state

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_Evacuating" Id="{73e85527-ea70-407e-b767-1abba3a4e18f}">
      <Declaration><![CDATA[METHOD M_Activity_Evacuating
VAR_INPUT
END_VAR
VAR
	index1:	INT	:= E_CRYO_EVAC_PRESSURES_50000.VAG2;
	index2:	INT	:= E_CRYO_EVAC_PRESSURES_50000.VAG3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// System is started by setting in_bEnable to TRUE
IF NOT in_bEnable THEN
	// If system is disabled, start stopping procedure.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES);	// Next state
	
ELSIF 	ptrP[index1]^.stat.lrPressure > cfg.lrThld_PrevacHigh  AND
		ptrP[index2]^.stat.lrPressure > cfg.lrThld_PrevacHigh THEN
	// Something is wrong. Prevacuum pressure is too high. Stop evacuation!
	// Set error.
	M_SetError('Prevacuum pressure too high. Stopping evacuation...');
	M_SetNextState(E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES);	// Next state
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_Off" Id="{efac3a27-85ed-4fb9-8234-92021aa8750e}">
      <Declaration><![CDATA[METHOD M_Activity_Off
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Disable anything that is not safe in this state
ctrl.bEnable_PVP	:= FALSE;
ctrl.bEnable_TMP	:= FALSE;
ctrl.bEnable_PVV1	:= FALSE;
ctrl.bEnable_PVV2	:= FALSE;
ctrl.bEnable_PVV3	:= FALSE;
ctrl.bEnable_PVV4	:= FALSE;
ctrl.bEnable_GBV	:= FALSE;


// System is started by setting in_bEnable to TRUE
trig(CLK := in_bEnable);

IF trig.Q THEN
	// Clear any existing error
	M_SetError('OK');
	
	M_SetNextState(E_CRYO_EVAC_STATE_50000.START_PVP);	// Next state
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_OpeningValve" Id="{c26031ec-ff14-4c9c-9601-5cb187cd5f69}">
      <Declaration><![CDATA[METHOD M_Activity_OpeningValve
VAR_INPUT
	index:		INT;
	nNextState:	E_CRYO_EVAC_STATE_50000;	// Next state after valve is closed
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT in_bEnable THEN
	// If system is disabled, start stopping procedure.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES);	// Next state
	
ELSIF ptrV[index]^.stat.bActON THEN
	// The valve is open.
	// Go to next state
	M_SetNextState(nNextState);
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_StartingPVP" Id="{bdff3ee0-c3bd-4474-ad16-98e438ae03da}">
      <Declaration><![CDATA[METHOD M_Activity_StartingPVP
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Disable anything that is not safe in this state
ctrl.bEnable_TMP	:= FALSE;
ctrl.bEnable_PVV1	:= FALSE;
ctrl.bEnable_PVV2	:= FALSE;
ctrl.bEnable_PVV3	:= FALSE;
ctrl.bEnable_PVV4	:= FALSE;
ctrl.bEnable_GBV	:= FALSE;


IF NOT in_bEnable THEN
	// If system is disabled, start stopping procedure.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES);	// Next state
	
ELSIF rpRef.M_IsReady() THEN
	// Roughing Pump is Ready.
	// Open Gas-ballast valve.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.OPEN_GBV);	// Next state
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_StartingTMP" Id="{e44c36ca-aac2-400c-b8d1-6044710fb2d3}">
      <Declaration><![CDATA[METHOD M_Activity_StartingTMP
VAR_INPUT
END_VAR
VAR
	index1:	INT	:= E_CRYO_EVAC_PRESSURES_50000.VAGF;
	index2:	INT	:= E_CRYO_EVAC_PRESSURES_50000.VAGG;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT in_bEnable THEN
	// If system is disabled, start stopping procedure by closing all valves.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES);	// Next state
	
ELSIF 	ptrP[index1]^.stat.lrPressure > cfg.lrThld_Prevac  OR
		ptrP[index2]^.stat.lrPressure > cfg.lrThld_Prevac 	THEN
	// Cryostat pressure is too high for some reason.
	// Stop Turbo Molecular pump.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.STOP_TMP_2);
		
ELSIF tpRef.M_IsReady() THEN
	// Turbo Molecular Pump is Ready, i.e., running at operational speed.
	// Open PVV3.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.OPEN_PVV3);	// Next state
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_StoppingPVP" Id="{623d5534-7bf6-44f8-9fb2-2370197272c3}">
      <Declaration><![CDATA[METHOD M_Activity_StoppingPVP
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Disable anything that is not safe in this state
ctrl.bEnable_PVP	:= FALSE;
ctrl.bEnable_TMP	:= FALSE;


// The evacuation system is in the process of shutting down.
// Allow re-starting of evacuation.
// System is started by setting in_bEnable to TRUE.
trig(CLK := in_bEnable);

IF trig.Q THEN
	// Clear any existing error
	M_SetError('OK');
	
	// Enable Roughing Pump
	M_SetNextState(E_CRYO_EVAC_STATE_50000.START_PVP);
	
ELSIF NOT rpRef.M_IsRunning() THEN
	// The Roughing Pump stopped.
	// Wait for the Turbo Pump to get to complete stop.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.WAIT_TMP_STANDSTILL);	// Next state

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_StoppingTMP" Id="{294df63e-b335-477b-a65b-77b4c573d21f}">
      <Declaration><![CDATA[METHOD M_Activity_StoppingTMP
VAR_INPUT
	index:	INT;	// Index of action(1 or 2, for STP_TMP and STOP2_TMP)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Disable anything that is not safe in this state


// The evacuation system is in the process of shutting down.
// Allow re-starting of evacuation.
// System is started by setting in_bEnable to TRUE.
trig(CLK := in_bEnable);

IF trig.Q THEN
	// Clear any existing error
	M_SetError('OK');
	
	// Enable Roughing Pump
	M_SetNextState(E_CRYO_EVAC_STATE_50000.START_PVP);
	
ELSIF NOT tpRef.M_IsReady() THEN
	// TODO: This is ATH2303M specific.
	//       Maybe, speed < 100 or similar check.
	
	IF index = 1	THEN
		// Case 1: Proceed with stopping PVP.
		M_SetNextState(E_CRYO_EVAC_STATE_50000.STOP_PVP);
	ELSIF index = 2	THEN
		// Case 2: Proceed with openning PVV1.
		M_SetNextState(E_CRYO_EVAC_STATE_50000.OPEN_PVV1);
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_Waiting2Pressures" Id="{75375b83-748c-4d28-abd7-21a2fbdbe902}">
      <Declaration><![CDATA[METHOD M_Activity_Waiting2Pressures
VAR_INPUT
	index1:		INT;
	index2:		INT;
	lrRef:		LREAL;	// Reference pressure [mbar]
	nNextState:	E_CRYO_EVAC_STATE_50000;	// Next state after pressure is reached
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if valve indexes are valid. Range [1..5]
// If not, just return (for safety).
IF index1 < 1  OR  index1 > 5  OR  index2 < 1  OR  index2 > 5  THEN
	RETURN;
END_IF 

IF	(ptrP[index1]^.stat.bValid  AND  ptrP[index1]^.stat.lrPressure < lrRef)  AND
	(ptrP[index2]^.stat.bValid  AND  ptrP[index2]^.stat.lrPressure < lrRef)  	THEN
	// The pressure has been reached.
	
	M_SetNextState(nNextState);	// Next state
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_WaitingPressure" Id="{7ad2c7b8-4d18-4e73-a2d7-a1677f53a4ce}">
      <Declaration><![CDATA[METHOD M_Activity_WaitingPressure
VAR_INPUT
	index:		INT;
	lrRef:		LREAL;	// Reference pressure [mbar]
	nNextState:	E_CRYO_EVAC_STATE_50000;	// Next state after pressure is reached
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if valve index is valid.
// If not, just return (for safety).
IF index < 1  OR  index > 5	THEN
	RETURN;
END_IF 

IF ptrP[index]^.stat.bValid  AND  ptrP[index]^.stat.lrPressure < lrRef  THEN
	// The pressure has been reached.
	
	M_SetNextState(nNextState);	// Next state
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Activity_WaitingTMP2Stop" Id="{568289d5-1555-48ed-97e8-15cc6a700a10}">
      <Declaration><![CDATA[METHOD M_Activity_WaitingTMP2Stop
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Disable anything that is not safe in this state
ctrl.bEnable_PVP	:= FALSE;
ctrl.bEnable_TMP	:= FALSE;


// The evacuation system is in the process of shutting down.
// Allow re-starting of evacuation.
// System is started by setting in_bEnable to TRUE.
trig(CLK := in_bEnable);

IF trig.Q THEN
	// Clear any existing error
	M_SetError('OK');
	
	// Enable Roughing Pump
	M_SetNextState(E_CRYO_EVAC_STATE_50000.START_PVP);
	
ELSIF tpRef.M_GetSpeed() = 0 THEN
	// The Turbo Pump came to complete stop.
	// The Evacuation system is OFF.
	M_SetNextState(E_CRYO_EVAC_STATE_50000.OFF);
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Configure" Id="{c3891219-25cf-4d74-81b5-3ad4cfb663a3}">
      <Declaration><![CDATA[METHOD M_Configure
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//
// TODO USER: 
// This M_Configure() MUST be called once in the child FB M_Configure() method!!!
// It sets all the pointers to various variables.
// 
(*
//
// TODO USER in child FB
//
	// MANDATORY: Set References to pumps!!!
	// If not done, system will crash !!!
	rpRef	REF=rp;
	tpRef	REF=tp;
	
	// Specific instance configuration, e.g. pressure gauges' types.
	// See FB_CRYO_EVAC_MICADO::M_Configure().
	// ...

*)	

// Set pointers to Valves - MUST!!!
ptrV[1]	:= ADR(PVV1);
ptrV[2]	:= ADR(PVV2);
ptrV[3]	:= ADR(PVV3);
ptrV[4]	:= ADR(PVV4);
ptrV[5]	:= ADR(GBV);

// Set pointers to Valve Commands - MUST!!!
ptrVC[1]	:= ADR(cmdPVV1);
ptrVC[2]	:= ADR(cmdPVV2);
ptrVC[3]	:= ADR(cmdPVV3);
ptrVC[4]	:= ADR(cmdPVV4);
ptrVC[5]	:= ADR(cmdGBV);

// Set pointers to Enable Valves flags - MUST!!!
ptrEV[1]	:= ADR(ctrl.bEnable_PVV1);
ptrEV[2]	:= ADR(ctrl.bEnable_PVV2);
ptrEV[3]	:= ADR(ctrl.bEnable_PVV3);
ptrEV[4]	:= ADR(ctrl.bEnable_PVV4);
ptrEV[5]	:= ADR(ctrl.bEnable_GBV);


// Set pointers to Pressures - MUST!!!
ptrP[1]	:= ADR(VAG1);
ptrP[2]	:= ADR(VAG2);
ptrP[3]	:= ADR(VAG3);
ptrP[4]	:= ADR(VAGF);
ptrP[5]	:= ADR(VAGG);
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ExecuteControllers" Id="{86bf8ec5-40f3-4351-9a6e-2fc3fe3261b4}">
      <Declaration><![CDATA[METHOD M_ExecuteControllers
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Valve commands
cmdPVV1(in_bEnable := ctrl.bEnable_PVV1);	// Handling of PVV1 commands
cmdPVV2(in_bEnable := ctrl.bEnable_PVV2);	// Handling of PVV2 commands
cmdPVV3(in_bEnable := ctrl.bEnable_PVV3);	// Handling of PVV3 commands
cmdPVV4(in_bEnable := ctrl.bEnable_PVV4);	// Handling of PVV4 commands
cmdGBV (in_bEnable := ctrl.bEnable_GBV);	// Handling of GBV  commands

// Valve Control
PVV1(
	in_bEnable			:= cmdPVV1.out_bEnable,
	in_nFeedback		:= E_CRYO_BIN_ACT_FEEDBACK.ON_AND_OFF);

PVV2(
	in_bEnable			:= cmdPVV2.out_bEnable,
	in_nFeedback		:= E_CRYO_BIN_ACT_FEEDBACK.ON_AND_OFF);

PVV3(
	in_bEnable			:= cmdPVV3.out_bEnable,
	in_nFeedback		:= E_CRYO_BIN_ACT_FEEDBACK.ON_AND_OFF);

PVV4(
	in_bEnable			:= cmdPVV4.out_bEnable,
	in_nFeedback		:= E_CRYO_BIN_ACT_FEEDBACK.ON_AND_OFF);

GBV(
	in_bEnable			:= cmdGBV.out_bEnable,
	in_nFeedback		:= E_CRYO_BIN_ACT_FEEDBACK.ON_AND_OFF);

	]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ReadSensors" Id="{fc00e930-bf2b-4318-8b3c-730b2b0d5ecd}">
      <Declaration><![CDATA[METHOD M_ReadSensors
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[///////////////////////////////////////////////
// Read individual prevacuum pressure sensors.
///////////////////////////////////////////////
//
// Pressure readings are averaged over 100 ms.
//
// Note: Pressure sensor type is configured in cfg and overwritten in M_Configure().
//       Default is Pfeiffer PKR 360 KF25.
sensor_VAG1	(in_nType := cfg.nType_VAG1,	in_nSampleTime := 100);
sensor_VAG2	(in_nType := cfg.nType_VAG2,	in_nSampleTime := 100);
sensor_VAG3	(in_nType := cfg.nType_VAG3,	in_nSampleTime := 100);
(*
sensor_VAGF1(in_nType := cfg.nType_VAGF1,	in_nSampleTime := 100);
sensor_VAGF2(in_nType := cfg.nType_VAGF2,	in_nSampleTime := 100);
sensor_VAGG1(in_nType := cfg.nType_VAGG1,	in_nSampleTime := 100);
sensor_VAGG2(in_nType := cfg.nType_VAGG2,	in_nSampleTime := 100);
*)

//////////////////////////////////////////////
// Use voting system to calculate pressures.
//////////////////////////////////////////////
//
// Note: VAG 1-3 have got only one sensor pressure connected !!!
//       VAG F & G have got two pressure sensors connected !
//
VAG1(
	in_bSimulation	:= cfg.bPressSimulation,
	in_nNumSensor	:= 2,
	in_nVoteMethod	:= E_CRYO_VOTE.V_1oo2,
	in_pSensor1		:= ADR(sensor_VAG1));

VAG2(
	in_bSimulation	:= cfg.bPressSimulation,
	in_nNumSensor	:= 2,
	in_nVoteMethod	:= E_CRYO_VOTE.V_1oo2,
	in_pSensor1		:= ADR(sensor_VAG2));

VAG3(
	in_bSimulation	:= cfg.bPressSimulation,
	in_nNumSensor	:= 2,
	in_nVoteMethod	:= E_CRYO_VOTE.V_1oo2,
	in_pSensor1		:= ADR(sensor_VAG3));

	
// Copy pressure references to local variables
VAGF	:= in_RefVAGF;
VAGG	:= in_RefVAGG;

	
(*	
VAGF(
	in_bSimulation	:= cfg.bPressSimulation,
	in_nNumSensor	:= 2,
	in_nVoteMethod	:= E_CRYO_VOTE.V_1oo2,
	in_pSensor1		:= ADR(sensor_VAGF1),
	in_pSensor2		:= ADR(sensor_VAGF2));

VAGG(
	in_bSimulation	:= cfg.bPressSimulation,
	in_nNumSensor	:= 2,
	in_nVoteMethod	:= E_CRYO_VOTE.V_1oo2,
	in_pSensor1		:= ADR(sensor_VAGG1),
	in_pSensor2		:= ADR(sensor_VAGG2));
*)
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetError" Id="{b8a559a1-247c-4a6c-843d-6d6322994a7b}">
      <Declaration><![CDATA[METHOD M_SetError
VAR_INPUT
	in_sErrorText:	STRING(64);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stat.bError		:= (in_sErrorText <> 'OK');
stat.sErrorText	:= in_sErrorText;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetLabels" Id="{e2a2c6e1-1791-4cb5-ba18-26a166b05aac}">
      <Declaration><![CDATA[METHOD M_SetLabels
VAR_INPUT
END_VAR
VAR
    fbFormat:	FB_FormatString;
	nVal:		UDINT;
	lrVal:		LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE stat.nState	OF
	E_CRYO_EVAC_STATE_50000.NONE:
		stat.sState		:= 'NONE';
		stat.sStatus	:= 'UNKNOWN';
		
	E_CRYO_EVAC_STATE_50000.OFF:
		stat.sState		:= 'OFF';
		stat.sStatus	:= 'OFF';
		
	E_CRYO_EVAC_STATE_50000.START_PVP:
		stat.sState		:= 'START_PVP';
		stat.sStatus	:= 'Starting Roughing Pump...';
		
	E_CRYO_EVAC_STATE_50000.START_TMP:
		stat.sState		:= 'START_TMP';
		stat.sStatus	:= 'Starting Turbo Molecular Pump...';
		
	E_CRYO_EVAC_STATE_50000.STOP_TMP_1,
	E_CRYO_EVAC_STATE_50000.STOP_TMP_2:
		stat.sState		:= 'STOP_TMP_x';
		stat.sStatus	:= 'Stopping Turbo Molecular Pump...';
		
	E_CRYO_EVAC_STATE_50000.STOP_PVP:
		stat.sState		:= 'STOP_PVP';
		stat.sStatus	:= 'Stopping Roughing Pump...';
		
	E_CRYO_EVAC_STATE_50000.WAIT_VAG3:
		stat.sState		:= 'WAIT_VAG3';
		fbFormat(	sFormat := 'Waiting VAG3 <= %.4f [mbar]...', 
					arg1 := F_LREAL(cfg.lrThld_Prevac), 
					sOut => stat.sStatus);
					
	E_CRYO_EVAC_STATE_50000.WAIT_VAG_1_3:
		stat.sState		:= 'WAIT_VAG_1_3';
		fbFormat(	sFormat := 'Waiting VAG1 & VAG3 <= %.4f [mbar]...', 
					arg1 := F_LREAL(cfg.lrThld_Prevac), 
					sOut => stat.sStatus);
					
	E_CRYO_EVAC_STATE_50000.WAIT_VAG_2_3:
		stat.sState		:= 'WAIT_VAG_2_3';
		fbFormat(	sFormat := 'Waiting VAG2 & VAG3 <= %.4f [mbar]...', 
					arg1 := F_LREAL(cfg.lrThld_Prevac), 
					sOut => stat.sStatus);
					
	E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_1:
		stat.sState		:= 'WAIT_VAG_F_G_1';
		lrVal			:= 0.9 * cfg.lrThld_Prevac;
		fbFormat(	sFormat := 'Waiting VAGF & VAGG <= %.4f [mbar]...', 
					arg1 := F_LREAL(lrVal), 
					sOut => stat.sStatus);
					
	E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_2:
		stat.sState		:= 'WAIT_VAG_F_G_2';
		fbFormat(	sFormat := 'Waiting VAGF & VAGG <= %.4f [mbar]...', 
					arg1 := F_LREAL(cfg.lrThld_Vacuum), 
					sOut => stat.sStatus);
					
	E_CRYO_EVAC_STATE_50000.OPEN_PVV1:
		stat.sState		:= 'OPEN_PVV1';
		stat.sStatus	:= 'Opening PVV1 Valve...';

	E_CRYO_EVAC_STATE_50000.OPEN_PVV2:
		stat.sState		:= 'OPEN_PVV2';
		stat.sStatus	:= 'Opening PVV2 Valve...';

	E_CRYO_EVAC_STATE_50000.OPEN_PVV3:
		stat.sState		:= 'OPEN_PVV3';
		stat.sStatus	:= 'Opening PVV3 Valve...';

	E_CRYO_EVAC_STATE_50000.OPEN_PVV4:
		stat.sState		:= 'OPEN_PVV4';
		stat.sStatus	:= 'Opening PVV4 Valve...';
	
	E_CRYO_EVAC_STATE_50000.OPEN_GBV:
		stat.sState		:= 'OPEN_GBV';
		stat.sStatus	:= 'Opening Gas-ballast Valve...';

	E_CRYO_EVAC_STATE_50000.CLOSE_PVV1:
		stat.sState		:= 'CLOSE_PVV1';
		stat.sStatus	:= 'Closing PVV1 Valve...';

	E_CRYO_EVAC_STATE_50000.CLOSE_PVV2:
		stat.sState		:= 'CLOSE_PVV2';
		stat.sStatus	:= 'Closing PVV2 Valve...';

	E_CRYO_EVAC_STATE_50000.CLOSE_GBV:
		stat.sState		:= 'CLOSE_GBV';
		stat.sStatus	:= 'Closing GBV Valve...';

	E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES:
		stat.sState		:= 'CLOSE_ALL_VALVES';
		stat.sStatus	:= 'Closing All Valves...';
		
	E_CRYO_EVAC_STATE_50000.EVACUATING:
		stat.sState		:= 'EVACUATING';
		stat.sStatus	:= 'EVACUATING...';
		
	E_CRYO_EVAC_STATE_50000.DELAY_STOPPING:
		stat.sState		:= 'DELAY_STOPPING';
		nVal			:= TIME_TO_UDINT(cfg.tDelay);
		fbFormat(	sFormat := 'Delay of %d [ms] Before Stopping Pumps...', 
					arg1 := F_UDINT(nVal), 
					sOut => stat.sStatus);
					
	E_CRYO_EVAC_STATE_50000.WAIT_TMP_STANDSTILL:
		stat.sState		:= 'WAIT_TMP_STANDSTILL';
		stat.sStatus	:= 'Waiting for Turbo Molecular Pump to get Standstill...';
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetNextState" Id="{2090a417-987e-45d0-b7d7-208fee27bf66}">
      <Declaration><![CDATA[METHOD M_SetNextState
VAR_INPUT
	nNextState:	E_CRYO_EVAC_STATE_50000;	// Next state
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stat.nState	:= nNextState;	// Next state
M_ActionExecute();			// Execute Action for next state
M_SetLabels();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_StateMachine" Id="{e5375918-227a-4abf-865a-452bd4793553}">
      <Declaration><![CDATA[METHOD M_StateMachine
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE stat.nState	OF
	E_CRYO_EVAC_STATE_50000.NONE:
		M_SetNextState(E_CRYO_EVAC_STATE_50000.OFF);
	E_CRYO_EVAC_STATE_50000.OFF:
		M_Activity_Off();

	E_CRYO_EVAC_STATE_50000.START_PVP:
		M_Activity_StartingPVP();

	E_CRYO_EVAC_STATE_50000.OPEN_GBV:
		M_Activity_OpeningValve(
			index		:= E_CRYO_EVAC_VALVES_50000.GBV, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.WAIT_VAG3);

	E_CRYO_EVAC_STATE_50000.WAIT_VAG3:
		M_Activity_WaitingPressure(
			index		:= E_CRYO_EVAC_PRESSURES_50000.VAG3, 
			lrRef		:= cfg.lrThld_Prevac, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.OPEN_PVV1);

	E_CRYO_EVAC_STATE_50000.OPEN_PVV1:
		M_Activity_OpeningValve(
			index		:= E_CRYO_EVAC_VALVES_50000.PVV1, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.WAIT_VAG_1_3);

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_1_3:
		M_Activity_Waiting2Pressures(
			index1		:= E_CRYO_EVAC_PRESSURES_50000.VAG1, 
			index2		:= E_CRYO_EVAC_PRESSURES_50000.VAG3, 
			lrRef		:= cfg.lrThld_Prevac, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.OPEN_PVV2);

	E_CRYO_EVAC_STATE_50000.OPEN_PVV2:
		M_Activity_OpeningValve(
			index		:= E_CRYO_EVAC_VALVES_50000.PVV2, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_1);

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_1:
		M_Activity_Waiting2Pressures(
			index1		:= E_CRYO_EVAC_PRESSURES_50000.VAGF, 
			index2		:= E_CRYO_EVAC_PRESSURES_50000.VAGG, 
			lrRef		:= 0.9 * cfg.lrThld_Prevac, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.CLOSE_PVV2);

	E_CRYO_EVAC_STATE_50000.CLOSE_PVV2:
		M_Activity_ClosingValve(
			index		:= E_CRYO_EVAC_VALVES_50000.PVV2, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.CLOSE_PVV1);

	E_CRYO_EVAC_STATE_50000.CLOSE_PVV1:
		M_Activity_ClosingValve(
			index		:= E_CRYO_EVAC_VALVES_50000.PVV1, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.START_TMP);

	E_CRYO_EVAC_STATE_50000.START_TMP:
		M_Activity_StartingTMP();
		
	E_CRYO_EVAC_STATE_50000.OPEN_PVV3:
		M_Activity_OpeningValve(
			index		:= E_CRYO_EVAC_VALVES_50000.PVV3, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.WAIT_VAG_2_3);

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_2_3:
		M_Activity_Waiting2Pressures(
			index1		:= E_CRYO_EVAC_PRESSURES_50000.VAG2, 
			index2		:= E_CRYO_EVAC_PRESSURES_50000.VAG3, 
			lrRef		:= cfg.lrThld_Prevac, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.OPEN_PVV4);

	E_CRYO_EVAC_STATE_50000.OPEN_PVV4:
		M_Activity_OpeningValve(
			index		:= E_CRYO_EVAC_VALVES_50000.PVV4, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_2);

	E_CRYO_EVAC_STATE_50000.WAIT_VAG_F_G_2:
		M_Activity_Waiting2Pressures(
			index1		:= E_CRYO_EVAC_PRESSURES_50000.VAGF, 
			index2		:= E_CRYO_EVAC_PRESSURES_50000.VAGG, 
			lrRef		:= cfg.lrThld_Vacuum, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.CLOSE_GBV);

	E_CRYO_EVAC_STATE_50000.CLOSE_GBV:
		M_Activity_ClosingValve(
			index		:= E_CRYO_EVAC_VALVES_50000.GBV, 
			nNextState	:= E_CRYO_EVAC_STATE_50000.EVACUATING);

	E_CRYO_EVAC_STATE_50000.EVACUATING:
		M_Activity_Evacuating();

	E_CRYO_EVAC_STATE_50000.CLOSE_ALL_VALVES:
		M_Activity_ClosingAllValves();

	E_CRYO_EVAC_STATE_50000.DELAY_STOPPING:
		M_Activity_DelayBeforeStoppingPumps();

	E_CRYO_EVAC_STATE_50000.STOP_TMP_1:
		M_Activity_StoppingTMP(1);

	E_CRYO_EVAC_STATE_50000.STOP_PVP:
		M_Activity_StoppingPVP();

	E_CRYO_EVAC_STATE_50000.WAIT_TMP_STANDSTILL:
		M_Activity_WaitingTMP2Stop();

	E_CRYO_EVAC_STATE_50000.STOP_TMP_2:
		M_Activity_StoppingTMP(2);

	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_UpdateStatus" Id="{f80eb705-6397-4f3e-8b0a-a07c8d77133f}">
      <Declaration><![CDATA[METHOD M_UpdateStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stat.bEnabled		:= in_bEnable;
stat.bRootPumpON	:= rpRef.M_IsReady();
stat.bTurboPumpON	:= tpRef.M_IsReady();


]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000">
      <LineId Id="147" Count="2" />
      <LineId Id="145" Count="1" />
      <LineId Id="72" Count="5" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_ActionExecute">
      <LineId Id="428" Count="84" />
      <LineId Id="334" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_ClosingAllValves">
      <LineId Id="21" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="17" Count="1" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_ClosingValve">
      <LineId Id="47" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_DelayBeforeStoppingPumps">
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_Evacuating">
      <LineId Id="12" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_Off">
      <LineId Id="48" Count="16" />
      <LineId Id="68" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_OpeningValve">
      <LineId Id="9" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="48" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_StartingPVP">
      <LineId Id="64" Count="17" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_StartingTMP">
      <LineId Id="9" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="54" Count="2" />
      <LineId Id="53" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_StoppingPVP">
      <LineId Id="39" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="25" Count="6" />
      <LineId Id="35" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_StoppingTMP">
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="34" Count="9" />
      <LineId Id="47" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="61" Count="3" />
      <LineId Id="60" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_Waiting2Pressures">
      <LineId Id="8" Count="6" />
      <LineId Id="27" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_WaitingPressure">
      <LineId Id="8" Count="8" />
      <LineId Id="27" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Activity_WaitingTMP2Stop">
      <LineId Id="36" Count="2" />
      <LineId Id="40" Count="1" />
      <LineId Id="22" Count="9" />
      <LineId Id="35" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_Configure">
      <LineId Id="25" Count="1" />
      <LineId Id="125" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="90" Count="3" />
      <LineId Id="129" Count="0" />
      <LineId Id="131" Count="2" />
      <LineId Id="130" Count="0" />
      <LineId Id="94" Count="30" />
      <LineId Id="74" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_ExecuteControllers">
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="4" />
      <LineId Id="37" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="16" Count="16" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_ReadSensors">
      <LineId Id="56" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="61" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="30" Count="10" />
      <LineId Id="79" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="41" Count="5" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_SetError">
      <LineId Id="16" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_SetLabels">
      <LineId Id="298" Count="12" />
      <LineId Id="406" Count="12" />
      <LineId Id="311" Count="66" />
      <LineId Id="382" Count="10" />
      <LineId Id="402" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_SetNextState">
      <LineId Id="7" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_StateMachine">
      <LineId Id="507" Count="107" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CRYO_EVAC_BASE_50000.M_UpdateStatus">
      <LineId Id="7" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>