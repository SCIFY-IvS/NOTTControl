<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_MUDPI_RECEIVER" Id="{70f87653-d3ad-4d6a-99ba-bddf6b879c1f}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    This function blocks aims to CCS data coming in MUDPI frames.
    It uses the Beckhoff realtime UDP driver (TF6311). 
    The user of this function blocks needs to do the following in order for the library to work correctly:
    - Initialize the library with configuration parameters
        - Source port
*)

{attribute 'c++_compatible'}
FUNCTION_BLOCK FB_MUDPI_RECEIVER IMPLEMENTS ITcIoUdpProtocolRecv
VAR_INPUT
	port : UINT := 10000;
	instance_name: STRING := 'undefined';
END_VAR
VAR_OUTPUT
END_VAR
VAR
	(* TF6311 realtime driver parameters *)
    {attribute 'TcInitSymbol'}
    oid : OTCID;
    ipUdp : ITcIoUdpProtocol;
	nUdpPort : UINT := port;
    nReceivedPackets : UINT;
    uLastReceivedIP : T_IP_ADDRESS;
    hrInit : HRESULT;
    bSuccessfulInitializationOfRealtimeDriver : BOOL := FALSE; 
	(* Data/contents parameters *)
    mudpiPacket : ESO_MUDPI.FB_MudpiPacket(topicId := 300, componentId := 5);
	packet_info : T_PACKET_INFO;
	udp_info: T_UDP_INFO;
	sLibVersion:	   STRING	:= 'UNKNOWN'; // Library version
   

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ipUdp <> 0 THEN
	ipUdp.CheckReceived();
END_IF
]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{379d002f-fa8b-40c9-a14c-6ade651e8020}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
    bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInCopyCode THEN // no online change
    IF ipUdp <> 0 THEN
        //ipUdp.UnregisterReceiver(nUdpPort); // Shutdown
        ipUdp.UnregisterReceiver(nUdpPort); // Shutdown
        FW_SafeRelease(ADR(ipUdp));
        FB_exit := TRUE;
    END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{fac64dcf-62b9-4e52-a9cd-74b9418f74cb}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
sLibVersion := stLibVersion_ESO_ELT_Utility_Library.sVersion;

IF NOT bInCopyCode THEN // no online change
	IF ipUdp = 0 AND oid <> 0 THEN
	    hrInit := FW_ObjMgr_GetObjectInstance(	oid:=oid, 
											iid:=TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocol, 
											pipUnk:=ADR(ipUdp) );
		IF SUCCEEDED(hrInit) THEN 
			IF  SUCCEEDED(ipUdp.RegisterReceiver(nUdpPort, THIS^)) THEN //open port
				FB_init := TRUE;
				udp_info.bDriverInitialization := TRUE;
				(*bSuccessfulInitializationOfRealtimeDriver := TRUE;*)
			ELSE 
				FB_init := FALSE; 
				FW_SafeRelease(ADR(ipUdp));
			END_IF
		END_IF
	ELSIF oid = 0 THEN 
		FB_init := FALSE; 
		hrInit := ERR_INVALID_PARAM; 				
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_reinit" Id="{d2f5a625-473c-4a83-bbcb-cb9314ce27f6}">
      <Declaration><![CDATA[METHOD FB_reinit : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ipUdp <> 0) THEN
    //ipUdp.RegisterReceiver(nUdpPort, THIS^);
    ipUdp.RegisterReceiver(nUdpPort, THIS^);
    FB_reinit := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMudpiPayload" Id="{908f2993-fb77-4740-af52-43982b606db9}">
      <Declaration><![CDATA[METHOD PUBLIC GetMudpiPayload : POINTER TO BYTE]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMudpiPayload := mudpiPacket.GetPayload();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMudpiPayloadSize" Id="{92f87fd7-0a89-486f-88f6-c7dbe5e07261}">
      <Declaration><![CDATA[METHOD PUBLIC GetMudpiPayloadSize : UINT]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMudpiPayloadSize := mudpiPacket.GetPayloadSize();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTimestamp" Id="{fa1158bb-9802-4550-ace7-389353a7c293}">
      <Declaration><![CDATA[METHOD PUBLIC GetTimestamp : LREAL
VAR_INPUT	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetTimestamp := packet_info.timestamp;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IpAddressStringToInteger" Id="{9ae3f7b7-88fd-4fe1-8879-cd1a7432b376}">
      <Declaration><![CDATA[METHOD PRIVATE IpAddressStringToInteger : UDINT
VAR_INPUT
    IpAddress : Tc2_System.T_IPv4Addr;
END_VAR
VAR
    IpAddressArray : Tc2_System.T_IPv4AddrArr;
    IpAddressInteger : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IpAddressArray := Tc2_System.F_ScanIPv4AddrIds(sIPv4 := IpAddress);
IpAddressInteger := LREAL_TO_UDINT(IpAddressArray[0] * EXPT(256, 3) +
                                   IpAddressArray[1] * EXPT(256, 2) +
                                   IpAddressArray[2] * EXPT(256, 1) +
                                   IpAddressArray[3]);

IpAddressStringToInteger := IpAddressInteger;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IpIntegerToAddressString" Id="{3ced3952-6227-414a-aed3-e50192040429}">
      <Declaration><![CDATA[METHOD PRIVATE IpIntegerToAddressString : Tc2_System.T_IPv4Addr
VAR_INPUT
    IpAddress : T_IP_ADDRESS;
END_VAR
VAR
    IpAddressArray : Tc2_System.T_IPv4AddrArr;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[


IpAddressArray[3] := IpAddress.ipAdr[0];
IpAddressArray[2] := IpAddress.ipAdr[1];
IpAddressArray[1] := IpAddress.ipAdr[2];
IpAddressArray[0] := IpAddress.ipAdr[3];

IpIntegerToAddressString := F_CreateIPv4Addr( IpAddressArray );
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReceiveData" Id="{e08e01b2-e10e-41e2-8e2a-919ac83a7780}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
METHOD ReceiveData : HRESULT
VAR_INPUT
	ipAddr	: UDINT;
	udpDestPort	: UINT;
	udpSrcPort	: UINT;
	nData	: UDINT;
	pData	: PVOID;
	pVlan	: POINTER TO ETYPE_VLAN_HEADER := 0;
END_VAR
VAR
	tmp: LREAL;
END_VAR

VAR CONSTANT
	UNIX_OFFSET_MICROSEC: ULINT := DATE_TO_ULINT(DATE#2000-01-01) * 10#1000_000;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
nReceivedPackets := nReceivedPackets + 1;
uLastReceivedIP.ipAdrInternal := ipAddr;
memset(ADR(buffer), 0, SIZEOF(buffer));
memcpy(ADR(buffer), pData, nData);
*)
udp_info.nReceivedPackets := udp_info.nReceivedPackets + 1;
udp_info.uSenderAddress.ipAdrInternal := ipAddr;
udp_info.ipv4Adr := IpIntegerToAddressString(udp_info.uSenderAddress);

mudpiPacket.Initialize(inputData := pData,
                  size := UDINT_TO_UINT(nData));
packet_info.topicId := mudpiPacket.GetTopicId();
packet_info.componentId := mudpiPacket.GetComponentId();
packet_info.appTag := mudpiPacket.GetApplicationTag();
packet_info.version := mudpiPacket.GetVersion();
packet_info.frameId := mudpiPacket.GetFrameId();
packet_info.sampleId := mudpiPacket.GetSampleId();
packet_info.size := UDINT_TO_UINT(nData);
packet_info.payloadSize := mudpiPacket.GetPayloadSize();
packet_info.timestamp := mudpiPacket.GetTimestamp();
packet_info.valid := ValidatePacket();





]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcAddRef" Id="{2db89ae5-d4a8-4cae-b55d-205f20cb6602}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{warning 'add method implementation'}
METHOD TcAddRef : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcQueryInterface" Id="{3187786a-2a99-46b6-9adf-4823981af4c4}">
      <Declaration><![CDATA[{attribute 'object_name' := 'TcQueryInterface'}
{attribute 'c++_compatible'}
{attribute 'signature_flag' := '33554688'}
{attribute 'pack_mode' := '4'}
{attribute 'show'}
{attribute 'minimal_input_size' := '4'}
METHOD TcQueryInterface : HRESULT
VAR_INPUT
	iid	: REFERENCE TO IID;
	pipItf	: POINTER TO PVOID;
END_VAR
VAR
	ipUdpRecv : ITcIoUdpProtocolRecv;
	ipUnknown : ITcUnknown;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcIoUdpProtocolRecv)) THEN
	ipUdpRecv := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUdpRecv);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSIF GuidsEqual(ADR(iid), ADR(TC_GLOBAL_IID_LIST.IID_ITcUnknown)) THEN
	ipUnknown := THIS^; // cast to interface pointer
	pipItf^ := ITCUNKNOWN_TO_PVOID(ipUnknown);
	TcAddRef();
	TcQueryInterface := S_OK;
ELSE
	TcQueryInterface := E_HRESULTAdsErr.NOINTERFACE ; //Call super if this fb extends some other
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TcRelease" Id="{052c490b-48da-43aa-9196-81673b6faf5e}">
      <Declaration><![CDATA[{attribute 'c++_compatible'}
{attribute 'minimal_input_size' := '4'}
{attribute 'pack_mode' := '4'}
{warning 'add method implementation'}
METHOD TcRelease : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValidatePacket" Id="{87d23796-5650-463c-9fed-11ac01b71515}">
      <Declaration><![CDATA[(*
    This method verifies, if the checksum of a MUDPI packet is correct.
    TRUE = Checksum does match the content of the packet, FALSE = checksum does not match.
*)
METHOD PUBLIC ValidatePacket : BOOL
VAR
    checksum1 : UINT;
    checksum2 : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ValidatePacket := mudpiPacket.VerifyPacket();
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MUDPI_RECEIVER">
      <LineId Id="76" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.FB_exit">
      <LineId Id="20" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.FB_init">
      <LineId Id="54" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="61" Count="8" />
      <LineId Id="86" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="70" Count="9" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.FB_reinit">
      <LineId Id="11" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.GetMudpiPayload">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.GetMudpiPayloadSize">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.GetTimestamp">
      <LineId Id="56" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.IpAddressStringToInteger">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.IpIntegerToAddressString">
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.ReceiveData">
      <LineId Id="60" Count="4" />
      <LineId Id="51" Count="2" />
      <LineId Id="66" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="55" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="98" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="82" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.TcAddRef">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.TcQueryInterface">
      <LineId Id="49" Count="11" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.TcRelease">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_MUDPI_RECEIVER.ValidatePacket">
      <LineId Id="37" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>